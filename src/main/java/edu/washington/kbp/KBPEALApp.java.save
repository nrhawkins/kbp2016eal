package edu.washington.kbp;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import java.lang.StringBuffer;
import java.io.File;
import java.io.IOException;

import com.bbn.bue.common.IntIDSequence;
import com.bbn.bue.common.symbols.Symbol;
import com.bbn.kbp.events2014.Response;
import com.bbn.kbp.events2014.ResponseSet;
import com.bbn.kbp.events2014.KBPString;
import com.bbn.kbp.events2014.CharOffsetSpan;
import com.bbn.kbp.events2014.KBPRealis;
import com.bbn.kbp.events2014.DocumentSystemOutput2015;
import com.bbn.kbp.events2014.ArgumentOutput;
import com.bbn.kbp.events2014.ResponseLinking;

import com.bbn.kbp.events2014.io.SystemOutputStore2016;

import com.google.common.base.Optional;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableBiMap;

import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.CoreAnnotations.SentencesAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.TextAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.TokensAnnotation;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;

import edu.washington.common.KBPDocument;
//import edu.washington.cs.figer.analysis.Preprocessing;

import edu.washington.nsre.NewsSpikeSentencePredict;
import edu.washington.nsre.extraction.NewsSpikeRelationPrediction;

import edu.washington.utilities.StanfordAnnotatorHelperMethods;


public class KBPEALApp {


    //public static void main(String[] args){
    //    System.out.println("KBPEALApp: " );
    //}

    public static void doProcessNewsSpike(List<KBPDocument> documents, String outputDirectory){


        System.out.println("KBPEALApp: num docs " + documents.size());
        //Preprocessing.initPipeline();
        NewsSpikeSentencePredict nssp = new NewsSpikeSentencePredict();
        StanfordCoreNLP annotator = new StanfordAnnotatorHelperMethods().getBasicPipeline();
 

        for(KBPDocument document: documents){

            try {

                List<CoreLabel> docTokens = new ArrayList<CoreLabel>();
                //String docString = document.getRawText();
                String docString = document.getCleanXMLString();
                Annotation annotation = new Annotation(docString);
                //Preprocessing.pipeline.annotate(annotation);
                annotator.annotate(annotation);
                List<CoreMap> sentences = annotation.get(SentencesAnnotation.class);            

                System.out.println("KBPEALApp num sentences: " + sentences.size());

                for(CoreMap sentence : sentences){
                    //String sentenceText = sentence.get(TextAnnotation.class);
                    //int sentenceBeginOffset = tokens.get(0).beginPosition();
                    //System.out.println("KBPEALApp: sentence begin offset: " + sentenceBeginOffset);
                    //System.out.println("KBPEALApp sent text: " + sentenceText);                                        
                    List<CoreLabel> tokens = sentence.get(TokensAnnotation.class);
                    docTokens.addAll(tokens);
                }

                //System.out.println("KBPEALApp num doc tokens: "  + docTokens.size());
                
                List<NewsSpikeRelationPrediction> relations = nssp.predictKBP(docString);
                System.out.println("RELATIONS: " + relations.size());


                 

                //Note: NewsSpikeRelationPrediction stores sentence token offsets, not sentence char offsets
                for(NewsSpikeRelationPrediction relation: relations){
                    int arg1Start = docTokens.get(relation.getArg1().getStartOffset()).beginPosition();
                    int arg1End = docTokens.get(relation.getArg1().getEndOffset()-1).endPosition();
                    int arg2Start = docTokens.get(relation.getArg2().getStartOffset()).beginPosition();
                    int arg2End = docTokens.get(relation.getArg2().getEndOffset()-1).endPosition();
                    String arg1CAS = docString.substring(arg1Start, arg1End);
                    String arg2CAS = docString.substring(arg2Start, arg2End);
                    System.out.println("arg1: " + arg1CAS + " " + arg1Start + ":" + arg1End);
                    System.out.println("arg2: " + arg2CAS + " " + arg2Start + ":" + arg2End);

                    System.out.println("relation: " + relation.getRelation());
                    System.out.println("arg1Type: " + relation.getArg1Type());
                    System.out.println("arg2Type: " + relation.getArg2Type());
                    System.out.println("confidence: " + relation.getConfidence());

                    



                }

                DocumentSystemOutput2015 docSystemOutput = DocumentSystemOutput2015.from(argumentOutput, responseLinking);
                SystemOutputStore2016 systemOutputStore2016 = SystemOutputStore2016.openOrCreate(outputDirectory);
                systemOutputStore2016.write(docSystemOutput);

            } catch (Exception e) {
                e.printStackTrace();
            }


        }

    }

    private DocumentSystemOutput2015 createDocumentOutput(List<NewsSpikeRelationPrediction> relations){

                




    }


    public static void testBBNClasses(List<KBPDocument> documents, String outputDirectory){

        Symbol type = Symbol.from("Life.Die");
        Symbol role = Symbol.from("Victim");
        Symbol docid = Symbol.from("doc1");
        CharOffsetSpan basefiller = new CharOffsetSpan(0,11, "nothing");
        CharOffsetSpan pj = new CharOffsetSpan(0,31, "nothing");
        KBPString cas = KBPString.from("Barack Obama", basefiller);
        KBPRealis realis = KBPRealis.parse("actual");
        Response response = Response.builder()
            .docID(docid)
            .type(type)
            .role(role)
            .canonicalArgument(cas)
            .baseFiller(basefiller)
            .addPredicateJustifications(pj)
            .realis(realis)
            .build();

        System.out.println("Response: " + response.docID());
        System.out.println("Response: " + response.type());
        System.out.println("Response: " + response.role());
        System.out.println("Response: " + response.canonicalArgument());
        System.out.println("Response: " + response.baseFiller());
        System.out.println("Response: " + response.realis());
        System.out.println("Response: " + response.uniqueIdentifier());
    
        basefiller = new CharOffsetSpan(0,13, "nothing");
        cas = KBPString.from("Michelle Obama", basefiller);
        Response response2 = Response.builder()
            .docID(docid)
            .type(type)
            .role(role)
            .canonicalArgument(cas)
            .baseFiller(basefiller)
            .addPredicateJustifications(pj)
            .realis(realis)
            .build();

        System.out.println("Response: " + response2.docID());
        System.out.println("Response: " + response2.type());
        System.out.println("Response: " + response2.role());
        System.out.println("Response: " + response2.canonicalArgument());
        System.out.println("Response: " + response2.baseFiller());
        System.out.println("Response: " + response2.realis());
        System.out.println("Response: " + response2.uniqueIdentifier());

        Set<Response> responses = new HashSet<Response>();
        responses.add(response);
        responses.add(response2);

        //this code works, but isn't what ArgumentOutput expects
        ResponseSet.Builder responseSetBuilder = ResponseSet.builder();
        responseSetBuilder.addResponses(response);
        responseSetBuilder.addResponses(response2);
        ResponseSet responseSet = responseSetBuilder.build();

        ImmutableSet.Builder<ResponseSet> responseSetsBuilder = ImmutableSet.builder();
        responseSetsBuilder.add(responseSet);
        ImmutableSet<ResponseSet> responseSets = responseSetsBuilder.build();

        Map<Response, Double> confidences = new HashMap<Response, Double>();
        Map<Response, String> metadata = new HashMap<Response, String>();

        ArgumentOutput argumentOutput = ArgumentOutput.createWithConstantScore(docid, responses, 1.0);
        //ArgumentOutput.Builder argumentOutputBuilder = ArgumentOutput.Builder(docid, responses, confidences, metadata);
        //ArgumentOutput argumentOutput = argumentOutputBuilder.build();
        //ArgumentOutput argumentOutput = new ArgumentOutput.Builder(docid, ResponseSet.from(responses), confidences, metadata).build();

        ImmutableBiMap.Builder<String, ResponseSet> responseSetIdsBuilder = ImmutableBiMap.builder();
        responseSetIdsBuilder.put("1", responseSet);
        ImmutableBiMap<String, ResponseSet> responseSetIds = responseSetIdsBuilder.build();
        Optional<ImmutableBiMap<String, ResponseSet>> responseSetIdsOptional = Optional.of(responseSetIds);


        ResponseLinking responseLinking = ResponseLinking.builder()
                  .docID(docid)
                  .responseSets(responseSets)
                  .responseSetIds(responseSetIdsOptional)
                  .build();

        System.out.println("arguments docid: " + argumentOutput.docId());
        System.out.println("linking docid: " + responseLinking.docID());


        try{

        File writeDir = new File("/projects/WebWare9/nhawkins/ealOutput/test/");

        DocumentSystemOutput2015 docSystemOutput = DocumentSystemOutput2015.from(argumentOutput, responseLinking);
        SystemOutputStore2016 systemOutputStore2016 = SystemOutputStore2016.openOrCreate(writeDir);
        //SystemOutputStore2016 systemOutputStore2016 = SystemOutputStore2016.getInstance();
        systemOutputStore2016.write(docSystemOutput);

        }catch(IOException e){

        }

    }

}
